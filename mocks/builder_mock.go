// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/packager"
	"sync"
)

// Ensure, that BuilderMock does implement packager.Builder.
// If this is not the case, regenerate this file with moq.
var _ packager.Builder = &BuilderMock{}

// BuilderMock is a mock implementation of packager.Builder.
//
// 	func TestSomethingThatUsesBuilder(t *testing.T) {
//
// 		// make and configure a mocked packager.Builder
// 		mockedBuilder := &BuilderMock{
// 			BuildFunc: func(project packager.Locator) error {
// 				panic("mock out the Build method")
// 			},
// 		}
//
// 		// use mockedBuilder in code that requires packager.Builder
// 		// and then make assertions.
//
// 	}
type BuilderMock struct {
	// BuildFunc mocks the Build method.
	BuildFunc func(project packager.Locator) error

	// calls tracks calls to the methods.
	calls struct {
		// Build holds details about calls to the Build method.
		Build []struct {
			// Project is the project argument value.
			Project packager.Locator
		}
	}
	lockBuild sync.RWMutex
}

// Build calls BuildFunc.
func (mock *BuilderMock) Build(project packager.Locator) error {
	if mock.BuildFunc == nil {
		panic("BuilderMock.BuildFunc: method is nil but Builder.Build was just called")
	}
	callInfo := struct {
		Project packager.Locator
	}{
		Project: project,
	}
	mock.lockBuild.Lock()
	mock.calls.Build = append(mock.calls.Build, callInfo)
	mock.lockBuild.Unlock()
	return mock.BuildFunc(project)
}

// BuildCalls gets all the calls that were made to Build.
// Check the length with:
//     len(mockedBuilder.BuildCalls())
func (mock *BuilderMock) BuildCalls() []struct {
	Project packager.Locator
} {
	var calls []struct {
		Project packager.Locator
	}
	mock.lockBuild.RLock()
	calls = mock.calls.Build
	mock.lockBuild.RUnlock()
	return calls
}
