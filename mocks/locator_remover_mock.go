// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/packager"
	"sync"
)

// Ensure, that LocatorRemoverMock does implement packager.LocatorRemover.
// If this is not the case, regenerate this file with moq.
var _ packager.LocatorRemover = &LocatorRemoverMock{}

// LocatorRemoverMock is a mock implementation of packager.LocatorRemover.
//
// 	func TestSomethingThatUsesLocatorRemover(t *testing.T) {
//
// 		// make and configure a mocked packager.LocatorRemover
// 		mockedLocatorRemover := &LocatorRemoverMock{
// 			LocationFunc: func() string {
// 				panic("mock out the Location method")
// 			},
// 			RemoveFunc: func() error {
// 				panic("mock out the Remove method")
// 			},
// 		}
//
// 		// use mockedLocatorRemover in code that requires packager.LocatorRemover
// 		// and then make assertions.
//
// 	}
type LocatorRemoverMock struct {
	// LocationFunc mocks the Location method.
	LocationFunc func() string

	// RemoveFunc mocks the Remove method.
	RemoveFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Location holds details about calls to the Location method.
		Location []struct {
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
		}
	}
	lockLocation sync.RWMutex
	lockRemove   sync.RWMutex
}

// Location calls LocationFunc.
func (mock *LocatorRemoverMock) Location() string {
	if mock.LocationFunc == nil {
		panic("LocatorRemoverMock.LocationFunc: method is nil but LocatorRemover.Location was just called")
	}
	callInfo := struct {
	}{}
	mock.lockLocation.Lock()
	mock.calls.Location = append(mock.calls.Location, callInfo)
	mock.lockLocation.Unlock()
	return mock.LocationFunc()
}

// LocationCalls gets all the calls that were made to Location.
// Check the length with:
//     len(mockedLocatorRemover.LocationCalls())
func (mock *LocatorRemoverMock) LocationCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockLocation.RLock()
	calls = mock.calls.Location
	mock.lockLocation.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *LocatorRemoverMock) Remove() error {
	if mock.RemoveFunc == nil {
		panic("LocatorRemoverMock.RemoveFunc: method is nil but LocatorRemover.Remove was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	return mock.RemoveFunc()
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//     len(mockedLocatorRemover.RemoveCalls())
func (mock *LocatorRemoverMock) RemoveCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}
