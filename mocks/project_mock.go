// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/packager"
	"sync"
)

// Ensure, that ProjectMock does implement packager.Project.
// If this is not the case, regenerate this file with moq.
var _ packager.Project = &ProjectMock{}

// ProjectMock is a mock implementation of packager.Project.
//
// 	func TestSomethingThatUsesProject(t *testing.T) {
//
// 		// make and configure a mocked packager.Project
// 		mockedProject := &ProjectMock{
// 			FilesFunc: func() []string {
// 				panic("mock out the Files method")
// 			},
// 			HashFunc: func() string {
// 				panic("mock out the Hash method")
// 			},
// 			LanguageFunc: func() packager.Language {
// 				panic("mock out the Language method")
// 			},
// 		}
//
// 		// use mockedProject in code that requires packager.Project
// 		// and then make assertions.
//
// 	}
type ProjectMock struct {
	// FilesFunc mocks the Files method.
	FilesFunc func() []string

	// HashFunc mocks the Hash method.
	HashFunc func() string

	// LanguageFunc mocks the Language method.
	LanguageFunc func() packager.Language

	// calls tracks calls to the methods.
	calls struct {
		// Files holds details about calls to the Files method.
		Files []struct {
		}
		// Hash holds details about calls to the Hash method.
		Hash []struct {
		}
		// Language holds details about calls to the Language method.
		Language []struct {
		}
	}
	lockFiles    sync.RWMutex
	lockHash     sync.RWMutex
	lockLanguage sync.RWMutex
}

// Files calls FilesFunc.
func (mock *ProjectMock) Files() []string {
	if mock.FilesFunc == nil {
		panic("ProjectMock.FilesFunc: method is nil but Project.Files was just called")
	}
	callInfo := struct {
	}{}
	mock.lockFiles.Lock()
	mock.calls.Files = append(mock.calls.Files, callInfo)
	mock.lockFiles.Unlock()
	return mock.FilesFunc()
}

// FilesCalls gets all the calls that were made to Files.
// Check the length with:
//     len(mockedProject.FilesCalls())
func (mock *ProjectMock) FilesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockFiles.RLock()
	calls = mock.calls.Files
	mock.lockFiles.RUnlock()
	return calls
}

// Hash calls HashFunc.
func (mock *ProjectMock) Hash() string {
	if mock.HashFunc == nil {
		panic("ProjectMock.HashFunc: method is nil but Project.Hash was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHash.Lock()
	mock.calls.Hash = append(mock.calls.Hash, callInfo)
	mock.lockHash.Unlock()
	return mock.HashFunc()
}

// HashCalls gets all the calls that were made to Hash.
// Check the length with:
//     len(mockedProject.HashCalls())
func (mock *ProjectMock) HashCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHash.RLock()
	calls = mock.calls.Hash
	mock.lockHash.RUnlock()
	return calls
}

// Language calls LanguageFunc.
func (mock *ProjectMock) Language() packager.Language {
	if mock.LanguageFunc == nil {
		panic("ProjectMock.LanguageFunc: method is nil but Project.Language was just called")
	}
	callInfo := struct {
	}{}
	mock.lockLanguage.Lock()
	mock.calls.Language = append(mock.calls.Language, callInfo)
	mock.lockLanguage.Unlock()
	return mock.LanguageFunc()
}

// LanguageCalls gets all the calls that were made to Language.
// Check the length with:
//     len(mockedProject.LanguageCalls())
func (mock *ProjectMock) LanguageCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockLanguage.RLock()
	calls = mock.calls.Language
	mock.lockLanguage.RUnlock()
	return calls
}
