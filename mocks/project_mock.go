// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/packager"
	"sync"
)

// Ensure, that ProjectMock does implement packager.Project.
// If this is not the case, regenerate this file with moq.
var _ packager.Project = &ProjectMock{}

// ProjectMock is a mock implementation of packager.Project.
//
// 	func TestSomethingThatUsesProject(t *testing.T) {
//
// 		// make and configure a mocked packager.Project
// 		mockedProject := &ProjectMock{
// 			ExcludeFunc: func(path string) bool {
// 				panic("mock out the Exclude method")
// 			},
// 			RootFunc: func() string {
// 				panic("mock out the Root method")
// 			},
// 		}
//
// 		// use mockedProject in code that requires packager.Project
// 		// and then make assertions.
//
// 	}
type ProjectMock struct {
	// ExcludeFunc mocks the Exclude method.
	ExcludeFunc func(path string) bool

	// RootFunc mocks the Root method.
	RootFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Exclude holds details about calls to the Exclude method.
		Exclude []struct {
			// Path is the path argument value.
			Path string
		}
		// Root holds details about calls to the Root method.
		Root []struct {
		}
	}
	lockExclude sync.RWMutex
	lockRoot    sync.RWMutex
}

// Exclude calls ExcludeFunc.
func (mock *ProjectMock) Exclude(path string) bool {
	if mock.ExcludeFunc == nil {
		panic("ProjectMock.ExcludeFunc: method is nil but Project.Exclude was just called")
	}
	callInfo := struct {
		Path string
	}{
		Path: path,
	}
	mock.lockExclude.Lock()
	mock.calls.Exclude = append(mock.calls.Exclude, callInfo)
	mock.lockExclude.Unlock()
	return mock.ExcludeFunc(path)
}

// ExcludeCalls gets all the calls that were made to Exclude.
// Check the length with:
//     len(mockedProject.ExcludeCalls())
func (mock *ProjectMock) ExcludeCalls() []struct {
	Path string
} {
	var calls []struct {
		Path string
	}
	mock.lockExclude.RLock()
	calls = mock.calls.Exclude
	mock.lockExclude.RUnlock()
	return calls
}

// Root calls RootFunc.
func (mock *ProjectMock) Root() string {
	if mock.RootFunc == nil {
		panic("ProjectMock.RootFunc: method is nil but Project.Root was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRoot.Lock()
	mock.calls.Root = append(mock.calls.Root, callInfo)
	mock.lockRoot.Unlock()
	return mock.RootFunc()
}

// RootCalls gets all the calls that were made to Root.
// Check the length with:
//     len(mockedProject.RootCalls())
func (mock *ProjectMock) RootCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRoot.RLock()
	calls = mock.calls.Root
	mock.lockRoot.RUnlock()
	return calls
}
