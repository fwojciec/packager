// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/packager"
	"sync"
)

// Ensure, that ArchiverMock does implement packager.Archiver.
// If this is not the case, regenerate this file with moq.
var _ packager.Archiver = &ArchiverMock{}

// ArchiverMock is a mock implementation of packager.Archiver.
//
// 	func TestSomethingThatUsesArchiver(t *testing.T) {
//
// 		// make and configure a mocked packager.Archiver
// 		mockedArchiver := &ArchiverMock{
// 			ArchiveFunc: func(project packager.Locator, dest string) error {
// 				panic("mock out the Archive method")
// 			},
// 		}
//
// 		// use mockedArchiver in code that requires packager.Archiver
// 		// and then make assertions.
//
// 	}
type ArchiverMock struct {
	// ArchiveFunc mocks the Archive method.
	ArchiveFunc func(project packager.Locator, dest string) error

	// calls tracks calls to the methods.
	calls struct {
		// Archive holds details about calls to the Archive method.
		Archive []struct {
			// Project is the project argument value.
			Project packager.Locator
			// Dest is the dest argument value.
			Dest string
		}
	}
	lockArchive sync.RWMutex
}

// Archive calls ArchiveFunc.
func (mock *ArchiverMock) Archive(project packager.Locator, dest string) error {
	if mock.ArchiveFunc == nil {
		panic("ArchiverMock.ArchiveFunc: method is nil but Archiver.Archive was just called")
	}
	callInfo := struct {
		Project packager.Locator
		Dest    string
	}{
		Project: project,
		Dest:    dest,
	}
	mock.lockArchive.Lock()
	mock.calls.Archive = append(mock.calls.Archive, callInfo)
	mock.lockArchive.Unlock()
	return mock.ArchiveFunc(project, dest)
}

// ArchiveCalls gets all the calls that were made to Archive.
// Check the length with:
//     len(mockedArchiver.ArchiveCalls())
func (mock *ArchiverMock) ArchiveCalls() []struct {
	Project packager.Locator
	Dest    string
} {
	var calls []struct {
		Project packager.Locator
		Dest    string
	}
	mock.lockArchive.RLock()
	calls = mock.calls.Archive
	mock.lockArchive.RUnlock()
	return calls
}
