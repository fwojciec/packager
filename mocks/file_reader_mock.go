// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/packager"
	"sync"
)

// Ensure, that FileReaderMock does implement packager.FileReader.
// If this is not the case, regenerate this file with moq.
var _ packager.FileReader = &FileReaderMock{}

// FileReaderMock is a mock implementation of packager.FileReader.
//
// 	func TestSomethingThatUsesFileReader(t *testing.T) {
//
// 		// make and configure a mocked packager.FileReader
// 		mockedFileReader := &FileReaderMock{
// 			ReadFileFunc: func(path string) ([]byte, error) {
// 				panic("mock out the ReadFile method")
// 			},
// 		}
//
// 		// use mockedFileReader in code that requires packager.FileReader
// 		// and then make assertions.
//
// 	}
type FileReaderMock struct {
	// ReadFileFunc mocks the ReadFile method.
	ReadFileFunc func(path string) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// ReadFile holds details about calls to the ReadFile method.
		ReadFile []struct {
			// Path is the path argument value.
			Path string
		}
	}
	lockReadFile sync.RWMutex
}

// ReadFile calls ReadFileFunc.
func (mock *FileReaderMock) ReadFile(path string) ([]byte, error) {
	if mock.ReadFileFunc == nil {
		panic("FileReaderMock.ReadFileFunc: method is nil but FileReader.ReadFile was just called")
	}
	callInfo := struct {
		Path string
	}{
		Path: path,
	}
	mock.lockReadFile.Lock()
	mock.calls.ReadFile = append(mock.calls.ReadFile, callInfo)
	mock.lockReadFile.Unlock()
	return mock.ReadFileFunc(path)
}

// ReadFileCalls gets all the calls that were made to ReadFile.
// Check the length with:
//     len(mockedFileReader.ReadFileCalls())
func (mock *FileReaderMock) ReadFileCalls() []struct {
	Path string
} {
	var calls []struct {
		Path string
	}
	mock.lockReadFile.RLock()
	calls = mock.calls.ReadFile
	mock.lockReadFile.RUnlock()
	return calls
}
