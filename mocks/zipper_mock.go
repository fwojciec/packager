// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/packager"
	"sync"
)

// Ensure, that ZipperMock does implement packager.Zipper.
// If this is not the case, regenerate this file with moq.
var _ packager.Zipper = &ZipperMock{}

// ZipperMock is a mock implementation of packager.Zipper.
//
// 	func TestSomethingThatUsesZipper(t *testing.T) {
//
// 		// make and configure a mocked packager.Zipper
// 		mockedZipper := &ZipperMock{
// 			ZipFunc: func(buildDir string) (string, error) {
// 				panic("mock out the Zip method")
// 			},
// 		}
//
// 		// use mockedZipper in code that requires packager.Zipper
// 		// and then make assertions.
//
// 	}
type ZipperMock struct {
	// ZipFunc mocks the Zip method.
	ZipFunc func(buildDir string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Zip holds details about calls to the Zip method.
		Zip []struct {
			// BuildDir is the buildDir argument value.
			BuildDir string
		}
	}
	lockZip sync.RWMutex
}

// Zip calls ZipFunc.
func (mock *ZipperMock) Zip(buildDir string) (string, error) {
	if mock.ZipFunc == nil {
		panic("ZipperMock.ZipFunc: method is nil but Zipper.Zip was just called")
	}
	callInfo := struct {
		BuildDir string
	}{
		BuildDir: buildDir,
	}
	mock.lockZip.Lock()
	mock.calls.Zip = append(mock.calls.Zip, callInfo)
	mock.lockZip.Unlock()
	return mock.ZipFunc(buildDir)
}

// ZipCalls gets all the calls that were made to Zip.
// Check the length with:
//     len(mockedZipper.ZipCalls())
func (mock *ZipperMock) ZipCalls() []struct {
	BuildDir string
} {
	var calls []struct {
		BuildDir string
	}
	mock.lockZip.RLock()
	calls = mock.calls.Zip
	mock.lockZip.RUnlock()
	return calls
}
