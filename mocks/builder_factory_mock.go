// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/packager"
	"sync"
)

// Ensure, that BuilderFactoryMock does implement packager.BuilderFactory.
// If this is not the case, regenerate this file with moq.
var _ packager.BuilderFactory = &BuilderFactoryMock{}

// BuilderFactoryMock is a mock implementation of packager.BuilderFactory.
//
// 	func TestSomethingThatUsesBuilderFactory(t *testing.T) {
//
// 		// make and configure a mocked packager.BuilderFactory
// 		mockedBuilderFactory := &BuilderFactoryMock{
// 			NewFunc: func(lang packager.Language) (packager.Builder, error) {
// 				panic("mock out the New method")
// 			},
// 		}
//
// 		// use mockedBuilderFactory in code that requires packager.BuilderFactory
// 		// and then make assertions.
//
// 	}
type BuilderFactoryMock struct {
	// NewFunc mocks the New method.
	NewFunc func(lang packager.Language) (packager.Builder, error)

	// calls tracks calls to the methods.
	calls struct {
		// New holds details about calls to the New method.
		New []struct {
			// Lang is the lang argument value.
			Lang packager.Language
		}
	}
	lockNew sync.RWMutex
}

// New calls NewFunc.
func (mock *BuilderFactoryMock) New(lang packager.Language) (packager.Builder, error) {
	if mock.NewFunc == nil {
		panic("BuilderFactoryMock.NewFunc: method is nil but BuilderFactory.New was just called")
	}
	callInfo := struct {
		Lang packager.Language
	}{
		Lang: lang,
	}
	mock.lockNew.Lock()
	mock.calls.New = append(mock.calls.New, callInfo)
	mock.lockNew.Unlock()
	return mock.NewFunc(lang)
}

// NewCalls gets all the calls that were made to New.
// Check the length with:
//     len(mockedBuilderFactory.NewCalls())
func (mock *BuilderFactoryMock) NewCalls() []struct {
	Lang packager.Language
} {
	var calls []struct {
		Lang packager.Language
	}
	mock.lockNew.RLock()
	calls = mock.calls.New
	mock.lockNew.RUnlock()
	return calls
}
