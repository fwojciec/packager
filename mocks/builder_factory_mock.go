// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/packager"
	"sync"
)

// Ensure, that BuilderFactoryMock does implement packager.BuilderFactory.
// If this is not the case, regenerate this file with moq.
var _ packager.BuilderFactory = &BuilderFactoryMock{}

// BuilderFactoryMock is a mock implementation of packager.BuilderFactory.
//
// 	func TestSomethingThatUsesBuilderFactory(t *testing.T) {
//
// 		// make and configure a mocked packager.BuilderFactory
// 		mockedBuilderFactory := &BuilderFactoryMock{
// 			NewBuilderFunc: func(project packager.Project) (packager.Builder, error) {
// 				panic("mock out the NewBuilder method")
// 			},
// 		}
//
// 		// use mockedBuilderFactory in code that requires packager.BuilderFactory
// 		// and then make assertions.
//
// 	}
type BuilderFactoryMock struct {
	// NewBuilderFunc mocks the NewBuilder method.
	NewBuilderFunc func(project packager.Project) (packager.Builder, error)

	// calls tracks calls to the methods.
	calls struct {
		// NewBuilder holds details about calls to the NewBuilder method.
		NewBuilder []struct {
			// Project is the project argument value.
			Project packager.Project
		}
	}
	lockNewBuilder sync.RWMutex
}

// NewBuilder calls NewBuilderFunc.
func (mock *BuilderFactoryMock) NewBuilder(project packager.Project) (packager.Builder, error) {
	if mock.NewBuilderFunc == nil {
		panic("BuilderFactoryMock.NewBuilderFunc: method is nil but BuilderFactory.NewBuilder was just called")
	}
	callInfo := struct {
		Project packager.Project
	}{
		Project: project,
	}
	mock.lockNewBuilder.Lock()
	mock.calls.NewBuilder = append(mock.calls.NewBuilder, callInfo)
	mock.lockNewBuilder.Unlock()
	return mock.NewBuilderFunc(project)
}

// NewBuilderCalls gets all the calls that were made to NewBuilder.
// Check the length with:
//     len(mockedBuilderFactory.NewBuilderCalls())
func (mock *BuilderFactoryMock) NewBuilderCalls() []struct {
	Project packager.Project
} {
	var calls []struct {
		Project packager.Project
	}
	mock.lockNewBuilder.RLock()
	calls = mock.calls.NewBuilder
	mock.lockNewBuilder.RUnlock()
	return calls
}
