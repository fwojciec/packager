// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/packager"
	"sync"
)

// Ensure, that HasherMock does implement packager.Hasher.
// If this is not the case, regenerate this file with moq.
var _ packager.Hasher = &HasherMock{}

// HasherMock is a mock implementation of packager.Hasher.
//
// 	func TestSomethingThatUsesHasher(t *testing.T) {
//
// 		// make and configure a mocked packager.Hasher
// 		mockedHasher := &HasherMock{
// 			HashFunc: func(project packager.LocatorExcluder) (string, error) {
// 				panic("mock out the Hash method")
// 			},
// 		}
//
// 		// use mockedHasher in code that requires packager.Hasher
// 		// and then make assertions.
//
// 	}
type HasherMock struct {
	// HashFunc mocks the Hash method.
	HashFunc func(project packager.LocatorExcluder) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Hash holds details about calls to the Hash method.
		Hash []struct {
			// Project is the project argument value.
			Project packager.LocatorExcluder
		}
	}
	lockHash sync.RWMutex
}

// Hash calls HashFunc.
func (mock *HasherMock) Hash(project packager.LocatorExcluder) (string, error) {
	if mock.HashFunc == nil {
		panic("HasherMock.HashFunc: method is nil but Hasher.Hash was just called")
	}
	callInfo := struct {
		Project packager.LocatorExcluder
	}{
		Project: project,
	}
	mock.lockHash.Lock()
	mock.calls.Hash = append(mock.calls.Hash, callInfo)
	mock.lockHash.Unlock()
	return mock.HashFunc(project)
}

// HashCalls gets all the calls that were made to Hash.
// Check the length with:
//     len(mockedHasher.HashCalls())
func (mock *HasherMock) HashCalls() []struct {
	Project packager.LocatorExcluder
} {
	var calls []struct {
		Project packager.LocatorExcluder
	}
	mock.lockHash.RLock()
	calls = mock.calls.Hash
	mock.lockHash.RUnlock()
	return calls
}
