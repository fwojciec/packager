// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/packager"
	"sync"
)

// Ensure, that CopierMock does implement packager.Copier.
// If this is not the case, regenerate this file with moq.
var _ packager.Copier = &CopierMock{}

// CopierMock is a mock implementation of packager.Copier.
//
// 	func TestSomethingThatUsesCopier(t *testing.T) {
//
// 		// make and configure a mocked packager.Copier
// 		mockedCopier := &CopierMock{
// 			CopyFunc: func(source string, destination string) error {
// 				panic("mock out the Copy method")
// 			},
// 		}
//
// 		// use mockedCopier in code that requires packager.Copier
// 		// and then make assertions.
//
// 	}
type CopierMock struct {
	// CopyFunc mocks the Copy method.
	CopyFunc func(source string, destination string) error

	// calls tracks calls to the methods.
	calls struct {
		// Copy holds details about calls to the Copy method.
		Copy []struct {
			// Source is the source argument value.
			Source string
			// Destination is the destination argument value.
			Destination string
		}
	}
	lockCopy sync.RWMutex
}

// Copy calls CopyFunc.
func (mock *CopierMock) Copy(source string, destination string) error {
	if mock.CopyFunc == nil {
		panic("CopierMock.CopyFunc: method is nil but Copier.Copy was just called")
	}
	callInfo := struct {
		Source      string
		Destination string
	}{
		Source:      source,
		Destination: destination,
	}
	mock.lockCopy.Lock()
	mock.calls.Copy = append(mock.calls.Copy, callInfo)
	mock.lockCopy.Unlock()
	return mock.CopyFunc(source, destination)
}

// CopyCalls gets all the calls that were made to Copy.
// Check the length with:
//     len(mockedCopier.CopyCalls())
func (mock *CopierMock) CopyCalls() []struct {
	Source      string
	Destination string
} {
	var calls []struct {
		Source      string
		Destination string
	}
	mock.lockCopy.RLock()
	calls = mock.calls.Copy
	mock.lockCopy.RUnlock()
	return calls
}
