// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/packager"
	"io"
	"sync"
)

// Ensure, that FileCopierMock does implement packager.FileCopier.
// If this is not the case, regenerate this file with moq.
var _ packager.FileCopier = &FileCopierMock{}

// FileCopierMock is a mock implementation of packager.FileCopier.
//
// 	func TestSomethingThatUsesFileCopier(t *testing.T) {
//
// 		// make and configure a mocked packager.FileCopier
// 		mockedFileCopier := &FileCopierMock{
// 			CopyFunc: func(srcPath string, dest io.Writer) error {
// 				panic("mock out the Copy method")
// 			},
// 		}
//
// 		// use mockedFileCopier in code that requires packager.FileCopier
// 		// and then make assertions.
//
// 	}
type FileCopierMock struct {
	// CopyFunc mocks the Copy method.
	CopyFunc func(srcPath string, dest io.Writer) error

	// calls tracks calls to the methods.
	calls struct {
		// Copy holds details about calls to the Copy method.
		Copy []struct {
			// SrcPath is the srcPath argument value.
			SrcPath string
			// Dest is the dest argument value.
			Dest io.Writer
		}
	}
	lockCopy sync.RWMutex
}

// Copy calls CopyFunc.
func (mock *FileCopierMock) Copy(srcPath string, dest io.Writer) error {
	if mock.CopyFunc == nil {
		panic("FileCopierMock.CopyFunc: method is nil but FileCopier.Copy was just called")
	}
	callInfo := struct {
		SrcPath string
		Dest    io.Writer
	}{
		SrcPath: srcPath,
		Dest:    dest,
	}
	mock.lockCopy.Lock()
	mock.calls.Copy = append(mock.calls.Copy, callInfo)
	mock.lockCopy.Unlock()
	return mock.CopyFunc(srcPath, dest)
}

// CopyCalls gets all the calls that were made to Copy.
// Check the length with:
//     len(mockedFileCopier.CopyCalls())
func (mock *FileCopierMock) CopyCalls() []struct {
	SrcPath string
	Dest    io.Writer
} {
	var calls []struct {
		SrcPath string
		Dest    io.Writer
	}
	mock.lockCopy.RLock()
	calls = mock.calls.Copy
	mock.lockCopy.RUnlock()
	return calls
}
