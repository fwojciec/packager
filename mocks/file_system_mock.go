// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/packager"
	"sync"
)

// Ensure, that FileSystemMock does implement packager.FileSystem.
// If this is not the case, regenerate this file with moq.
var _ packager.FileSystem = &FileSystemMock{}

// FileSystemMock is a mock implementation of packager.FileSystem.
//
// 	func TestSomethingThatUsesFileSystem(t *testing.T) {
//
// 		// make and configure a mocked packager.FileSystem
// 		mockedFileSystem := &FileSystemMock{
// 			DirFunc: func(root string) ([]string, error) {
// 				panic("mock out the Dir method")
// 			},
// 			ReadFileFunc: func(path string) ([]byte, error) {
// 				panic("mock out the ReadFile method")
// 			},
// 		}
//
// 		// use mockedFileSystem in code that requires packager.FileSystem
// 		// and then make assertions.
//
// 	}
type FileSystemMock struct {
	// DirFunc mocks the Dir method.
	DirFunc func(root string) ([]string, error)

	// ReadFileFunc mocks the ReadFile method.
	ReadFileFunc func(path string) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// Dir holds details about calls to the Dir method.
		Dir []struct {
			// Root is the root argument value.
			Root string
		}
		// ReadFile holds details about calls to the ReadFile method.
		ReadFile []struct {
			// Path is the path argument value.
			Path string
		}
	}
	lockDir      sync.RWMutex
	lockReadFile sync.RWMutex
}

// Dir calls DirFunc.
func (mock *FileSystemMock) Dir(root string) ([]string, error) {
	if mock.DirFunc == nil {
		panic("FileSystemMock.DirFunc: method is nil but FileSystem.Dir was just called")
	}
	callInfo := struct {
		Root string
	}{
		Root: root,
	}
	mock.lockDir.Lock()
	mock.calls.Dir = append(mock.calls.Dir, callInfo)
	mock.lockDir.Unlock()
	return mock.DirFunc(root)
}

// DirCalls gets all the calls that were made to Dir.
// Check the length with:
//     len(mockedFileSystem.DirCalls())
func (mock *FileSystemMock) DirCalls() []struct {
	Root string
} {
	var calls []struct {
		Root string
	}
	mock.lockDir.RLock()
	calls = mock.calls.Dir
	mock.lockDir.RUnlock()
	return calls
}

// ReadFile calls ReadFileFunc.
func (mock *FileSystemMock) ReadFile(path string) ([]byte, error) {
	if mock.ReadFileFunc == nil {
		panic("FileSystemMock.ReadFileFunc: method is nil but FileSystem.ReadFile was just called")
	}
	callInfo := struct {
		Path string
	}{
		Path: path,
	}
	mock.lockReadFile.Lock()
	mock.calls.ReadFile = append(mock.calls.ReadFile, callInfo)
	mock.lockReadFile.Unlock()
	return mock.ReadFileFunc(path)
}

// ReadFileCalls gets all the calls that were made to ReadFile.
// Check the length with:
//     len(mockedFileSystem.ReadFileCalls())
func (mock *FileSystemMock) ReadFileCalls() []struct {
	Path string
} {
	var calls []struct {
		Path string
	}
	mock.lockReadFile.RLock()
	calls = mock.calls.ReadFile
	mock.lockReadFile.RUnlock()
	return calls
}
