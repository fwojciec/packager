// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/packager"
	"sync"
)

// Ensure, that FileSystemMock does implement packager.FileSystem.
// If this is not the case, regenerate this file with moq.
var _ packager.FileSystem = &FileSystemMock{}

// FileSystemMock is a mock implementation of packager.FileSystem.
//
// 	func TestSomethingThatUsesFileSystem(t *testing.T) {
//
// 		// make and configure a mocked packager.FileSystem
// 		mockedFileSystem := &FileSystemMock{
// 			ListDirFunc: func(path string) ([]string, error) {
// 				panic("mock out the ListDir method")
// 			},
// 			MakeTempDirFunc: func() (string, error) {
// 				panic("mock out the MakeTempDir method")
// 			},
// 		}
//
// 		// use mockedFileSystem in code that requires packager.FileSystem
// 		// and then make assertions.
//
// 	}
type FileSystemMock struct {
	// ListDirFunc mocks the ListDir method.
	ListDirFunc func(path string) ([]string, error)

	// MakeTempDirFunc mocks the MakeTempDir method.
	MakeTempDirFunc func() (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListDir holds details about calls to the ListDir method.
		ListDir []struct {
			// Path is the path argument value.
			Path string
		}
		// MakeTempDir holds details about calls to the MakeTempDir method.
		MakeTempDir []struct {
		}
	}
	lockListDir     sync.RWMutex
	lockMakeTempDir sync.RWMutex
}

// ListDir calls ListDirFunc.
func (mock *FileSystemMock) ListDir(path string) ([]string, error) {
	if mock.ListDirFunc == nil {
		panic("FileSystemMock.ListDirFunc: method is nil but FileSystem.ListDir was just called")
	}
	callInfo := struct {
		Path string
	}{
		Path: path,
	}
	mock.lockListDir.Lock()
	mock.calls.ListDir = append(mock.calls.ListDir, callInfo)
	mock.lockListDir.Unlock()
	return mock.ListDirFunc(path)
}

// ListDirCalls gets all the calls that were made to ListDir.
// Check the length with:
//     len(mockedFileSystem.ListDirCalls())
func (mock *FileSystemMock) ListDirCalls() []struct {
	Path string
} {
	var calls []struct {
		Path string
	}
	mock.lockListDir.RLock()
	calls = mock.calls.ListDir
	mock.lockListDir.RUnlock()
	return calls
}

// MakeTempDir calls MakeTempDirFunc.
func (mock *FileSystemMock) MakeTempDir() (string, error) {
	if mock.MakeTempDirFunc == nil {
		panic("FileSystemMock.MakeTempDirFunc: method is nil but FileSystem.MakeTempDir was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMakeTempDir.Lock()
	mock.calls.MakeTempDir = append(mock.calls.MakeTempDir, callInfo)
	mock.lockMakeTempDir.Unlock()
	return mock.MakeTempDirFunc()
}

// MakeTempDirCalls gets all the calls that were made to MakeTempDir.
// Check the length with:
//     len(mockedFileSystem.MakeTempDirCalls())
func (mock *FileSystemMock) MakeTempDirCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMakeTempDir.RLock()
	calls = mock.calls.MakeTempDir
	mock.lockMakeTempDir.RUnlock()
	return calls
}
